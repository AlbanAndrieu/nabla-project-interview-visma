<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<!-- @version $Revision: $ $Date: $ $Author: $ $State: $ -->
	<!-- @formatter:off -->
	<parent>
		<artifactId>visma</artifactId>
		<groupId>com.nabla.project.sample.interview.visma</groupId>
		<version>1.0.1-SNAPSHOT</version>
	</parent>
	<artifactId>gui</artifactId>
	<packaging>war</packaging>
	<name>Maven Java Server Faces Webapp for Visma</name>

	<!--
        <properties>
            <jsf.api.version>2.1</jsf.api.version>
            <jsf.impl.version>2.1</jsf.impl.version>
            <jsf.api.version>1.2_15</jsf.api.version>
            <jsf.impl.version>1.2_15</jsf.impl.version>
            <sun.jsf.api.version>2.1.7</sun.jsf.api.version>
            <sun.jsf.impl.version>2.1.7</sun.jsf.impl.version>
            <el.api.version>2.2.1-b04</el.api.version>
            <jboss.el.version>1.0_02.CR6</jboss.el.version>
        </properties>
    -->
	<properties>
		<jetty.runner.version>9.4.9.v20180320</jetty.runner.version>
		<appsensor.core.version>2.2.0</appsensor.core.version>
		<!--<cargo.jmx.rmi.port>2099</cargo.jmx.rmi.port>-->

		<!--
		<cargo.eclipse.debug><![CDATA[-Xdebug
		-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=${eclipse.port}
		-Xnoagent
		-Djava.compiler=NONE]]></cargo.eclipse.debug>
		-->

		<cargo.jetty.jmx.activation>-Dcom.sun.management.jmxremote=true
-Dcom.sun.management.jmxremote.ssl=false
-Dcom.sun.management.jmxremote.authenticate=false
-Dcom.sun.management.jmxremote.port=${cargo.monitoring.jmx.rmi.port}
-Djetty.jmxrmihost=${jetty.jmxremote.rmihost}
-Djetty.jmxrmiport=${jetty.jmxremote.rmiport}</cargo.jetty.jmx.activation>

		<!--<cargo.jetty.jmx.activation></cargo.jetty.jmx.activation>-->

		<cargo.jmx.activation>${cargo.jetty.jmx.activation}</cargo.jmx.activation>

		<!--<cargo.monitoring.jmx.rmi.port>1099</cargo.monitoring.jmx.rmi.port>-->
		<cargo.monitoring.jmx.rmi.port>10088</cargo.monitoring.jmx.rmi.port>
		<gatling.version>2.3.0</gatling.version>
		<httpclient.version>4.5.2</httpclient.version>

		<javax.servlet.api.version>3.1.0</javax.servlet.api.version>
		<jaxrs.doclet.version>0.0.4-SNAPSHOT</jaxrs.doclet.version>

		<jetty.jmxremote.rmihost>localhost</jetty.jmxremote.rmihost>
		<jetty.jmxremote.rmiport>3099</jetty.jmxremote.rmiport>
		<!--<lombok.version>1.16.20</lombok.version>-->

		<!--<org.jboss.arquillian.spi.version>1.0.0.Alpha5</org.jboss.arquillian.spi.version>-->
		<maven.jaxrs.analyzer.plugin.version>0.9</maven.jaxrs.analyzer.plugin.version>
		<netty.version>3.10.5.Final</netty.version>

		<!-- for jmeter -->
		<performancetest.webservice.path>/visma</performancetest.webservice.path>
		<scala.version>2.11.8</scala.version>
		<swagger.doclet.version>1.0.5</swagger.doclet.version>
		<swagger.version>1.5.9</swagger.version>
		<!--<jacoco.agent>-javaagent:${settings.localRepository}/org/jacoco/org.jacoco.agent/${jacoco.agent.version}/org.jacoco.agent-${jacoco.agent.version}-runtime.jar=output=tcpserver</jacoco.agent>-->
	</properties>

	<dependencyManagement>
		<dependencies>

			<!-- Override dependency resolver with latest version.
             This must go *BEFORE* the Arquillian BOM. -->
			<!--  ShrinkWrap
			<dependency>
				<groupId>org.jboss.shrinkwrap</groupId>
				<artifactId>shrinkwrap-bom</artifactId>
				<version>${org.jboss.shrinkwrap.bom.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.jboss.shrinkwrap.resolver</groupId>
				<artifactId>shrinkwrap-resolver-bom</artifactId>
				<version>${org.jboss.shrinkwrap.resolver.bom.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.jboss.shrinkwrap.descriptors</groupId>
				<artifactId>shrinkwrap-descriptors-bom</artifactId>
				<version>${org.jboss.shrinkwrap.descriptors.bom.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			-->

			<!-- Arquillian : http://arquillian.org/guides/getting_started_fr -->
			<dependency>
				<groupId>org.jboss.arquillian</groupId>
				<artifactId>arquillian-bom</artifactId>
				<version>${org.jboss.arquillian.bom.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<!-- JBoss distributes a complete set of Java EE 6 APIs including a Bill
                of Materials (BOM). A BOM specifies the versions of a "stack" (or a collection)
                of artifacts. We use this here so that we always get the correct versions
                of artifacts. Here we use the jboss-javaee-6.0-with tools stack (you can
                read this as the JBoss stack of the Java EE 6 APIs, with some extras tools
                for your project, such as Arquillian for testing) -->
			<!--
            <dependency>
                <groupId>org.jboss.bom</groupId>
                <artifactId>jboss-javaee-6.0-with-tools</artifactId>
                <version>${org.jboss.bom.jboss.javaee6.with.tools.version}</version>
                <type>pom</type>
                <scope>provided</scope>
            </dependency>
            -->
		</dependencies>
	</dependencyManagement>

	<dependencies>

		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<!--<version>${jsp-api.version}</version>-->
		</dependency>

		<!-- TODO must be needed later
        <dependency>
            <groupId>org.jboss.el</groupId>
            <artifactId>jboss-el</artifactId>
            <version>${jboss.el.version}</version>
            <scope>${scope.type}</scope>
        </dependency>

        <dependency>
            <groupId>javax.el</groupId>
            <artifactId>el-api</artifactId>
            <version>${el.api.version}</version>
            <scope>${scope.type}</scope>
        </dependency>

        <dependency>
            <groupId>org.mvel</groupId>
            <artifactId>mvel2</artifactId>
            <version>${org.mvel.mvel2.version}</version>
            <scope>${scope.type}</scope>
        </dependency>
        -->
		<!--
        <dependency>
            <groupId>commons-httpclient</groupId>
            <artifactId>commons-httpclient</artifactId>
            <scope>compile</scope>
        </dependency>
        -->
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>${httpclient.version}</version>
		</dependency>

		<dependency>
			<groupId>com.google.code.findbugs</groupId>
			<artifactId>jsr305</artifactId>
			<optional>true</optional>
			<!-- needed only for annotations -->
			<!-- BUT needed for proguard obfuscation -->
		</dependency>

		<dependency>
			<groupId>org.codehaus.groovy</groupId>
			<artifactId>groovy-all</artifactId>
			<!--<scope>test</scope>-->
		</dependency>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>core</artifactId>
			<version>${project.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<exclusions>
				<!-- circular dependency -->
				<exclusion>
					<artifactId>logback-classic</artifactId>
					<groupId>ch.qos.logback</groupId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- replaced by ow2 asm-debug-all
        <dependency>
                <groupId>asm</groupId>
                <artifactId>asm</artifactId>
                <version>${asm.version}</version>
        </dependency>
        <dependency>
            <groupId>org.ow2.asm</groupId>
            <artifactId>asm-debug-all</artifactId>
            <version>${asm.version}</version>
        </dependency>
        -->
		<!--
        <dependency>
                <groupId>org.ow2.asm</groupId>
                <artifactId>asm-debug-all</artifactId>
                <version>${asm.ow2.version}</version>
        </dependency>
        -->

		<!--
		<dependency>
			<groupId>io.swagger</groupId>
			<artifactId>swagger-core</artifactId>
			<version>${swagger.version}</version>
			<scope>compile</scope>
			<exclusions>
				<exclusion>
					<artifactId>jsr311-api</artifactId>
					<groupId>javax.ws.rs</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		-->

		<!-- this is just one of the appsensor dependencies you'll need - see step
			below called pluggable components -->
		<!--
		<dependency>
			<groupId>org.owasp.appsensor</groupId>
			<artifactId>appsensor-core</artifactId>
			<version>${appsensor.core.version}</version>
			<exclusions>
				<exclusion>
					<artifactId>javax.inject</artifactId>
					<groupId>javax.inject</groupId>
				</exclusion>
				<exclusion>
					<artifactId>aopalliance</artifactId>
					<groupId>aopalliance</groupId>
				</exclusion>
				<exclusion>
					<artifactId>logback-classic</artifactId>
					<groupId>ch.qos.logback</groupId>
				</exclusion>
				<exclusion>
					<artifactId>logback-core</artifactId>
					<groupId>ch.qos.logback</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		-->
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
		</dependency>
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.ws.rs</groupId>
			<artifactId>javax.ws.rs-api</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.annotation</groupId>
			<artifactId>javax.annotation-api</artifactId>
			<version>${javax.annotation.api}</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-core-asl</artifactId>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>${lombok.version}</version>
			<scope>provided</scope>
		</dependency>

		<!-- First declare the APIs we depend on and need for compilation. All
            of them are provided by JBoss AS 7 -->

		<!-- Import the CDI API, we use provided scope as the API is included in
            JBoss AS 7 -->
		<!--
        <dependency>
            <groupId>javax.enterprise</groupId>
            <artifactId>cdi-api</artifactId>
            <scope>provided</scope>
        </dependency>
        -->

		<!-- Import the JPA API, we use provided scope as the API is included in
            JBoss AS 7 -->
		<!--
        <dependency>
            <groupId>org.jboss.spec.javax.transaction</groupId>
            <artifactId>jboss-transaction-api_1.1_spec</artifactId>
            <scope>provided</scope>
        </dependency>
        -->

		<!-- Import the Common Annotations API (JSR-250), we use provided scope
            as the API is included in JBoss AS 7 -->
		<!--
        <dependency>
            <groupId>org.jboss.spec.javax.annotation</groupId>
            <artifactId>jboss-annotations-api_1.1_spec</artifactId>
            <scope>provided</scope>
        </dependency>
        -->

		<!-- Import the JAX-RS API, we use provided scope as the API is included
            in JBoss AS 7 -->
		<!--
        <dependency>
            <groupId>org.jboss.spec.javax.ws.rs</groupId>
            <artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
            <scope>provided</scope>
        </dependency>
        -->

		<!-- Import the JPA API, we use provided scope as the API is included in
            JBoss AS 7 -->
		<!--
        <dependency>
            <groupId>org.hibernate.javax.persistence</groupId>
            <artifactId>hibernate-jpa-2.0-api</artifactId>
            <scope>provided</scope>
        </dependency>
        -->

		<!-- Import the EJB API, we use provided scope as the API is included in
            JBoss AS 7 -->
		<!--
        <dependency>
            <groupId>org.jboss.spec.javax.ejb</groupId>
            <artifactId>jboss-ejb-api_3.1_spec</artifactId>
            <scope>provided</scope>
        </dependency>
        -->

		<!-- Import the Bean Validation API, which is used both on the server and
            the client. -->
		<!--
        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
        </dependency>
        -->

		<!-- Import the JSF API, we use provided scope as the API is included
            in JBoss AS 7 -->
		<dependency>
			<groupId>org.jboss.spec.javax.faces</groupId>
			<artifactId>jboss-jsf-api_2.1_spec</artifactId>
			<version>${org.jboss.spec.javax.faces.jsf.api.2.1.version}</version>
			<scope>provided</scope>
		</dependency>

		<!-- http://repo1.maven.org/maven -->
		<!--
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>${jstl.version}</version>
        </dependency>
        -->

		<!--
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <scope>${scope.tomcat.never.type}</scope>
        </dependency>-->

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>${javax.servlet.api.version}</version>
			<scope>provided</scope>
			<!-- javax.servlet-api-3.0.1.jar Offending class javax/servlet/Servlet.class  in Tomcat -->
		</dependency>
		<dependency>
			<groupId>org.jboss.spec.javax.xml.bind</groupId>
			<artifactId>jboss-jaxb-api_2.2_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.shrinkwrap.resolver</groupId>
			<artifactId>shrinkwrap-resolver-depchain</artifactId>
			<version>${version.shrinkwrap.resolvers}</version>
			<type>pom</type>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.shrinkwrap.resolver</groupId>
			<artifactId>shrinkwrap-resolver-api-maven</artifactId>
			<version>${org.jboss.shrinkwrap.resolver.version}</version>
			<scope>test</scope>
		</dependency>

		<!--
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<type>jar</type>
			<scope>test</scope>
		</dependency>
		-->
		<!-- in order to use @net.jcip.annotations.NotThreadSafe in junit test -->
		<dependency>
			<groupId>com.github.stephenc.jcip</groupId>
			<artifactId>jcip-annotations</artifactId>
			<!--<version>${jcip.annotations.version}</version>-->
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>info.cukes</groupId>
			<artifactId>cucumber-java</artifactId>
			<version>${cucumber.version}</version>
			<scope>test</scope>
		</dependency>
		<!-- WARNING cucumber does not work with Jacoco when activated with surefire -->
		<dependency>
			<groupId>info.cukes</groupId>
			<artifactId>cucumber-junit</artifactId>
			<version>${cucumber.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>info.cukes</groupId>
			<artifactId>cucumber-core</artifactId>
			<version>${cucumber.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.arquillian.junit</groupId>
			<artifactId>arquillian-junit-container</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.arquillian.core</groupId>
			<artifactId>arquillian-core-api</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.arquillian.protocol</groupId>
			<artifactId>arquillian-protocol-servlet</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.arquillian.container</groupId>
			<artifactId>arquillian-container-test-api</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.arquillian.junit</groupId>
			<artifactId>arquillian-junit-core</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- ClassNotFoundException: org.w3c.dom.ElementTraversal for arquillian -->
		<dependency>
			<groupId>xml-apis</groupId>
			<artifactId>xml-apis</artifactId>
			<version>${xml.apis.version}</version>
			<scope>test</scope>
		</dependency>

		<!--
        <dependency>
            <groupId>org.jboss.arquillian</groupId>
            <artifactId>arquillian-spi</artifactId>
            <version>${org.jboss.arquillian.spi.version}</version>
            <scope>test</scope>
        </dependency>
        -->

		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-remote-driver</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-firefox-driver</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-api</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-support</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-safari-driver</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-iphone-driver</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-ie-driver</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-htmlunit-driver</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-android-driver</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-chrome-driver</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-server</artifactId>
			<scope>test</scope>
		</dependency>

		<!--
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>core</artifactId>
			<version>${project.version}</version>
			<type>test-jar</type>
			<classifier>tests</classifier>
			<scope>test</scope>
		</dependency>
		-->

		<dependency>
			<groupId>org.codehaus.groovy.modules.http-builder</groupId>
			<artifactId>http-builder</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<artifactId>groovy</artifactId>
					<groupId>org.codehaus.groovy</groupId>
				</exclusion>
			</exclusions>
		</dependency>

		<!--
       <dependency>
         <groupId>org.codehaus.groovy</groupId>
         <artifactId>groovy</artifactId>
         <exclusions>
             <exclusion>
                 <groupId>asm</groupId>
                 <artifactId>asm</artifactId>
             </exclusion>
         </exclusions>
       </dependency>
       -->

		<dependency>
			<groupId>org.jacoco</groupId>
			<artifactId>org.jacoco.agent</artifactId>
			<version>${jacoco.agent.version}</version>
			<type>jar</type>
			<classifier>runtime</classifier>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.newrelic.agent.java</groupId>
			<artifactId>newrelic-agent</artifactId>
			<version>${newrelic.version}</version>
			<scope>test</scope>
			<!--<scope>runtime</scope>-->
		</dependency>

		<!-- The newrelic-java.zip dependency. -->
		<!--
        <dependency>
          <groupId>com.newrelic.agent.java</groupId>
          <artifactId>newrelic-java</artifactId>
          <version>${newrelic.version}</version>
          <scope>provided</scope>
          <type>zip</type>
        </dependency>
        -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>${jdbc.h2.version}</version>
			<!-- <scope>runtime</scope>-->
			<scope>test</scope>
		</dependency>
		<!-- Log4J Adapter for SLF4J
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <scope>test</scope>
        </dependency>
        -->
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.codehaus.cargo</groupId>
			<artifactId>cargo-core-uberjar</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<artifactId>asm</artifactId>
					<groupId>asm</groupId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.jboss.shrinkwrap</groupId>
			<artifactId>shrinkwrap-api</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<scope>test</scope>
		</dependency>

		<!--
      <dependency>
         <groupId>org.jboss.weld.servlet</groupId>
         <artifactId>weld-servlet</artifactId>
         <version>${weld.servlet.version}</version>
      </dependency>
      -->

	</dependencies>

	<build>
		<finalName>visma</finalName>
		<plugins>
			<!--
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>selenium-maven-plugin</artifactId>
                <version>${maven.selenium.plugin.version}</version>
                <configuration>
                    <browser>*firefox</browser>
                    <suite>src/test/selenium/SimpleSTestSuite.html</suite>
                    <startURL>http://${cargo.host}:${cargo.port}/visma</startURL>
                </configuration>
                -->
			<!--
                <executions>
                    <execution>
                        <id>xvfb</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>xvfb</goal>
                        </goals>
                        <configuration>
                            <display>:99</display>
                        </configuration>
                    </execution>

                    <execution>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>start-server</goal>
                        </goals>
                        <configuration>
                            <background>true</background>
                        </configuration>
                    </execution>
                    <execution>
                        <id>run-selenium-tests</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>selenese</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>stop-selenium</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop-server</goal>
                        </goals>
                    </execution>

                </executions>
            -->
			<!--
            </plugin>
            -->

			<!-- TODO DEPRECATED SOON
			http://docs.groovy-lang.org/latest/html/documentation/tools-groovyeclipse.html
            <plugin>
                <groupId>org.codehaus.gmaven</groupId>
                <artifactId>gmaven-plugin</artifactId>
                <extensions>true</extensions>
            </plugin>
            -->

			<!--
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>add-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>${basedir}/src/main/groovy</source>
							</sources>
						</configuration>
					</execution>
					<execution>
						<id>add-test-source</id>
						<phase>generate-test-sources</phase>
						<goals>
							<goal>add-test-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>${basedir}/src/test/groovy</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			-->
			<!-- say to maven to use groovy-eclipse-compiler in order to compile groovy files -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven.compiler.plugin.version}</version>
				<extensions>true</extensions>
				<dependencies>
					<dependency>
						<groupId>org.codehaus.groovy</groupId>
						<artifactId>groovy-eclipse-compiler</artifactId>
						<version>${groovy.eclipse.compiler.version}</version>
					</dependency>
					<dependency>
						<groupId>org.codehaus.groovy</groupId>
						<artifactId>groovy-eclipse-batch</artifactId>
						<version>${groovy.eclipse.batch.version}</version>
					</dependency>
				</dependencies>
				<configuration>
					<compilerId>groovy-eclipse-compiler</compilerId>
					<verbose>true</verbose>
					<compilerArguments>
						<!--<javaAgentClass>lombok.core.Agent</javaAgentClass>-->
						<javaAgentClass>lombok.launch.Agent</javaAgentClass>
					</compilerArguments>
					<!--<fork>true</fork>-->
				</configuration>
			</plugin>
			<!--
			This plugin is important, because without
			<extensions>true</extensions> no files will be compiled.
			See http://groovy.codehaus.org/Groovy-Eclipse+compiler+plugin+for+Maven
			-->
			<!--
            <plugin>
                <groupId>org.codehaus.groovy</groupId>
                <artifactId>groovy-eclipse-compiler</artifactId>
                <version>${groovy.eclipse.compiler.version}</version>
                <extensions>true</extensions>
            </plugin>
            -->
			<!-- make sure our code doesn't have 1.6 dependencies except where we know it see * http://mojo.codehaus.org/animal-sniffer/index.html * http://weblogs.java.net/blog/kohsuke/archive/2008/11/compiling_with.html -->
			<!--
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>animal-sniffer-maven-plugin</artifactId>
				<version>${maven.animal.sniffer.plugin.version}</version>
				<executions>
					<execution>
						<id>check-java-api</id>
						<phase>test</phase>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<signature>
								<groupId>org.codehaus.mojo.signature</groupId>
								<artifactId>java15</artifactId>
								<version>1.0</version>
							</signature>
						</configuration>
					</execution>
				</executions>
			</plugin>
			-->

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<skipTests>${maven.test.skip}</skipTests>
					<testFailureIgnore>${maven.test.failure.skip}</testFailureIgnore>
					<testSourceDirectory>${basedir}/src/test/groovy</testSourceDirectory>
					<excludes>
						<exclude>**/*ITest*</exclude>
						<exclude>**/*STest*</exclude>
					</excludes>
					<systemPropertyVariables>
						<webdriver.chrome.driver>${webdriver.chrome.driver}</webdriver.chrome.driver>
						<webdriver.firefox.bin>${webdriver.firefox.bin}</webdriver.firefox.bin>
						<webdriver.safari.noinstall>true</webdriver.safari.noinstall>
						<!--<arquillian.launch>arq-jbossas-managed</arquillian.launch>-->
						<!--<arquillian.launch>arq-weld-ee-embedded</arquillian.launch>-->
					</systemPropertyVariables>
					<classpathDependencyExcludes>
						<classpathDependencyExcludes>org.apache.openjpa:openjpa-all</classpathDependencyExcludes>
						<classpathDependencyExcludes>org.ow2.asm:asm-all</classpathDependencyExcludes>
					</classpathDependencyExcludes>
				</configuration>
				<!-- run with -Prun-its instead
                <executions>
                    <execution>
                        <id>surefire-itest</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <excludes>
                                <exclude>none</exclude>
                            </excludes>
                            <includes>
                                <include>**/*ITest*</include>
                                <include>**/*STest*</include>
                            </includes>
                        </configuration>
                    </execution>
                </executions>
                -->
			</plugin>
			<!-- Start H2 before integration tests, accepting tcp connections on the
                randomly selected port -->
			<!--
            <plugin>
                <groupId>com.edugility</groupId>
                <artifactId>h2-maven-plugin</artifactId>
                <configuration>
                    <port>5055</port>
                    <baseDirectory>${basedir}/target</baseDirectory>
                </configuration>
                <executions>
                    <execution>
                        <id>Spawn a new H2 TCP server</id>
                        <goals>
                            <goal>spawn</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>Stop a spawned H2 TCP server</id>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            -->
			<plugin>
				<groupId>com.sinapsi.memtracker</groupId>
				<artifactId>mem-tracker-maven-plugin</artifactId>
				<version>${maven.mem.tracker.maven.plugin.version}</version>
				<executions>
					<execution>
						<id>integration-test</id>
						<phase>integration-test</phase>
						<goals>
							<goal>track</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<host>localhost</host>
					<port>${cargo.monitoring.jmx.rmi.port}</port>
				</configuration>
			</plugin>
			<!-- for automatic running of integration tests with Jetty -->
			<!-- mvn org.codehaus.cargo:cargo-maven2-plugin:run -->
			<plugin>
				<groupId>org.codehaus.cargo</groupId>
				<artifactId>cargo-maven2-plugin</artifactId>
				<version>${maven.cargo.maven2.plugin.version}</version>
				<extensions>true</extensions>
				<executions>
					<execution>
						<id>start-container-overrided</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>start</goal>
						</goals>
						<configuration>
							<timeout>240000</timeout>
							<!--
							<configuration>
								<properties>
									<cargo.start.jvmargs><![CDATA[${jacoco.agent} ${cargo.jmx.activation}]]></cargo.start.jvmargs>
								</properties>
							</configuration>
							-->
						</configuration>
					</execution>
					<execution>
						<id>stop-container-overrided</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>stop</goal>
						</goals>
						<configuration>
							<timeout>60000</timeout>
							<!--
						<configuration>
							<properties>
								<cargo.jmx.activation></cargo.jmx.activation>
								<cargo.start.jvmargs></cargo.start.jvmargs>
								<cargo.jvmargs><![CDATA[]]></cargo.jvmargs>
							</properties>
						</configuration>-->
						</configuration>
					</execution>
				</executions>
				<configuration>
					<skip>${maven.test.skip}</skip>
					<wait>${cargo.wait}</wait>
					<container>
						<!--<timeout>180000</timeout>-->
						<!-- 3 minutes -->
						<!--<timeout>240000</timeout>-->
						<!-- 4 minutes -->
						<!--<timeout>300000</timeout>-->
						<!-- 5 minutes -->
						<!--<timeout>480000</timeout>-->
						<!-- 8 minutes -->
						<timeout>600000</timeout>
						<!-- 10 minutes -->
						<!--<containerId>${cargo.container}</containerId> -->
						<!--<type>${cargo.container.type}</type> -->
						<log>${project.build.directory}/cargo.log</log>
						<logLevel>debug</logLevel>
						<systemProperties>
							<!--NOK <java.io.tmpdir>target/tmp</java.io.tmpdir>-->
							<log4j.debug>true</log4j.debug>
						</systemProperties>
						<!-- Class path contains multiple SLF4J bindings.
						<dependencies>
							<dependency>
								<groupId>org.slf4j</groupId>
								<artifactId>slf4j-api</artifactId>
							</dependency>
							<dependency>
								<groupId>org.slf4j</groupId>
								<artifactId>slf4j-log4j12</artifactId>
							</dependency>
							<dependency>
								<groupId>log4j</groupId>
								<artifactId>log4j</artifactId>
							</dependency>
						</dependencies>
						-->
					</container>
					<configuration>
						<!--<type>${cargo.configuration.type}</type>-->
						<!--<home>${project.build.directory}/cargo/installs/jboss-as-dist-7.1.1.Final/jboss-as-7.1.1.Final/standalone/</home>-->
						<properties>
							<cargo.protocol>${cargo.protocol}</cargo.protocol>
							<cargo.hostname>${cargo.host}</cargo.hostname>
							<cargo.servlet.port>${cargo.port}</cargo.servlet.port>
							<!--<cargo.rmi.port>${cargo.rmi.port}</cargo.rmi.port>-->
							<cargo.tomcat.ajp.port>${cargo.tomcat.ajp.port}</cargo.tomcat.ajp.port>
							<!--<cargo.tomcat.context.reloadable>true</cargo.tomcat.context.reloadable>-->
							<!--<cargo.tomcat.shutdown.port>9205</cargo.tomcat.shutdown.port>-->
							<cargo.tomcat.manager.url>${deploy.url}</cargo.tomcat.manager.url>
							<cargo.remote.username>${cargo.remote.user}</cargo.remote.username>
							<cargo.remote.password>${cargo.remote.password}</cargo.remote.password>

							<!--
                            <com.sun.management.jmxremote></com.sun.management.jmxremote>
                            <com.sun.management.jmxremote.port>1099</com.sun.management.jmxremote.port>
                            <com.sun.management.jmxremote.ssl>false</com.sun.management.jmxremote.ssl>
                            <com.sun.management.jmxremote.authenticate>false</com.sun.management.jmxremote.authenticate>
                            <com.sun.management.jmxremote>true</com.sun.management.jmxremote>

                            <java.rmi.server.hostname>localhost</java.rmi.server.hostname>
							-->

							<cargo.logging>high</cargo.logging>
							<!-- WARNING with jvmargs, when actifacted tomcat shutdown issue on port 8205 -->
							<!--<cargo.start.jvmargs><![CDATA[${newrelic.agent} ${jacoco.agent} ${jacoco.agent.it.arg} ${newrelic.agent}]]></cargo.start.jvmargs>-->
							<cargo.start.jvmargs><![CDATA[${cargo.eclipse.debug} ${jacoco.agent} ${cargo.jmx.activation}]]></cargo.start.jvmargs>
							<!--<cargo.jvmargs><![CDATA[${jacoco.agent} ${cargo.jmx.activation}]]></cargo.jvmargs>-->
							<!-- <cargo.jvmargs> -Dnabla.config=${basedir}/src/main/resources
                                -Dnabla.data=${basedir}/src/test/resources/data -->
							<!-- -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005 -->
							<!--<![CDATA[-Xdebug -Xrunjdwp:transport=dt_socket,address=${cargo.debug.address},server=y,suspend=${cargo.debug.suspend} -noverify ${javaagent}]]>-->
							<cargo.jetty.createContextXml>false</cargo.jetty.createContextXml>
						</properties>
						<configfiles>
							<configfile>
								<file>${project.basedir}/src/main/config/demo-base/etc</file>
								<todir>etc</todir>
							</configfile>
							<configfile>
								<file>${project.basedir}/src/main/config/demo-base/start.d</file>
								<todir>start.d</todir>
							</configfile>
							<configfile>
								<file>${project.basedir}/src/main/config/demo-base/webapps</file>
								<todir>webapps</todir>
							</configfile>
							<configfile>
								<file>${project.basedir}/src/main/config/demo-base/start.ini</file>
								<todir></todir>
							</configfile>
						</configfiles>
						<files>
							<configfile>
								<file>${project.basedir}/src/main/config/demo-base/keystore</file>
								<todir>etc</todir>
								<configfile>false</configfile>
								<overwrite>true</overwrite>
							</configfile>
						</files>
					</configuration>
					<deployables>
						<deployable>
							<groupId>${project.groupId}</groupId>
							<artifactId>${project.artifactId}</artifactId>
							<type>war</type>
							<properties>
								<context>/visma</context>
							</properties>
							<pingURL>${cargo.protocol}://${cargo.host}:${cargo.port}/visma/rest/loan/test</pingURL>
							<pingTimeout>60000</pingTimeout>
						</deployable>
					</deployables>
				</configuration>
				<!--
				<executions>
					<execution>
						<id>start</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>start</goal>
						</goals>
					</execution>
					<execution>
						<id>stop</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>undeploy</goal>
							<goal>stop</goal>
						</goals>
					</execution>
				</executions>
				-->
			</plugin>

			<!--
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<executions>
					<execution>
						<id>config-sources</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<descriptorRefs>
								<descriptorRef>config</descriptorRef>
							</descriptorRefs>
							<descriptors>
								<descriptor>src/main/assembly/web-bundle.xml</descriptor>
							</descriptors>
							<archive>
								<manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
							</archive>
						</configuration>
					</execution>
					<execution>
						<id>scripts-sources</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<descriptors>
								<descriptor>src/main/assembly/assembly-scripts.xml</descriptor>
							</descriptors>
							<appendAssemblyId>false</appendAssemblyId>
							<finalName>scripts-sources</finalName>
						</configuration>
					</execution>
				</executions>
			</plugin>
			-->
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<extensions>true</extensions>
				<executions>
					<execution>
						<phase>process-classes</phase>
						<goals>
							<goal>manifest</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<supportedProjectTypes>
						<supportedProjectType>war</supportedProjectType>
					</supportedProjectTypes>
					<instructions>
						<Import-Package>javax.servlet.jsp.*;version="[2.2.0,3.0)",org.eclipse.jetty.*;version="[$(version;===;${parsedVersion.osgiVersion}),$(version;==+;${parsedVersion.osgiVersion}))",*</Import-Package>
						<Export-Package>!com.nabla*</Export-Package>
						<!-- the test webapp is configured via a jetty xml file
						in order to add the security handler. -->
						<Web-ContextPath>/</Web-ContextPath>
						<!-- in fact the '.' must not be there
						but Felix-BND has a bug:
						http://www.mail-archive.com/users@felix.apache.org/msg04730.html
						https://issues.apache.org/jira/browse/FELIX-1571
						-->
						<Bundle-ClassPath>.,WEB-INF/classes</Bundle-ClassPath>
					</instructions>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<inherited>true</inherited>
				<configuration>
					<webXml>src/main/webapp/WEB-INF/web-overlay.xml</webXml>
					<filteringDeploymentDescriptors>true</filteringDeploymentDescriptors>
					<!-- also make this webapp an osgi bundle
					<archive>
						<manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
					</archive>
					-->
				</configuration>
			</plugin>
			<!-- The JBoss AS plugin deploys your war to a local JBoss AS container -->
			<!-- To use, run: mvn package jboss-as:deploy -->
			<plugin>
				<groupId>org.jboss.as.plugins</groupId>
				<artifactId>jboss-as-maven-plugin</artifactId>
				<!--<version>${maven.jboss.as.plugin.version}</version>-->
			</plugin>

			<plugin>
				<!-- Allow this web application to be started with the command : 'mvn jetty:run-war -Psample -Dserver=jetty9x -Ddatabase=derby -Djetty.port=9090' -->
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>${maven.jetty.eclipse.plugin.version}</version>
				<!--
				<executions>
					<execution>
						<id>start-jetty</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>run-war</goal>
						</goals>
						<configuration>
							<scanIntervalSeconds>0</scanIntervalSeconds>
							<daemon>true</daemon>
						</configuration>
					</execution>
					<execution>
						<id>stop-jetty</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>stop</goal>
						</goals>
					</execution>
				</executions>
				-->
				<dependencies>
					<dependency>
						<groupId>org.eclipse.jetty</groupId>
						<artifactId>jetty-client</artifactId>
						<version>${jetty9.version}</version>
					</dependency>
					<dependency>
						<groupId>org.eclipse.jetty</groupId>
						<artifactId>jetty-servlets</artifactId>
						<version>${jetty9.version}</version>
					</dependency>
					<dependency>
						<groupId>org.eclipse.jetty</groupId>
						<artifactId>jetty-http</artifactId>
						<version>${jetty9.version}</version>
					</dependency>
					<dependency>
						<groupId>org.eclipse.jetty</groupId>
						<artifactId>jetty-rewrite</artifactId>
						<version>${jetty9.version}</version>
					</dependency>
				</dependencies>
				<configuration>
					<!--<scanIntervalSeconds>10</scanIntervalSeconds>-->
					<scanIntervalSeconds>0</scanIntervalSeconds>
					<!-- for jrebel -->
					<!--TODO<jettyConfig>src/main/etc/jetty.xml</jettyConfig>-->
					<useTestClasspath>false</useTestClasspath>
					<httpConnector>
						<!--host>localhost</host-->
						<port>${jetty.port}</port>
					</httpConnector>
					<stopPort>${jetty.stop.port}</stopPort>
					<stopKey>STOP</stopKey>
					<stopPort>9999</stopPort>
					<stopWait>10</stopWait>
					<!--
                    <systemProperties>
                        <systemProperty>
                            <key>nabla.config</key>
                            <value>../../config/dev</value>
                        </systemProperty>
                        <systemProperty>
                            <key>nabla.data</key>
                            <value>${data.dir}</value>
                        </systemProperty>
                    </systemProperties>
                    -->
					<webApp>
						<contextPath>/visma</contextPath>
						<tempDirectory>${project.build.directory}/work</tempDirectory>
					</webApp>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.zeroturnaround</groupId>
				<artifactId>jrebel-maven-plugin</artifactId>
				<version>${maven.jrebel.plugin.version}</version>
				<executions>
					<execution>
						<id>generate-rebel-xml</id>
						<phase>process-resources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- start app using java -jar target/dependency/jetty-runner.jar target/*.war -port 9090 -->
			<!-- mvn org.apache.maven.plugins:maven-dependency-plugin:3.0.1:analyze-only -Dserver=jetty9x -Darquillian=arq-jetty-embedded -Psample,jacoco,integration,jmeter,run-its,arq-jetty-embedded,\!arq-weld-ee-embedded,\!arq-jbossas-managed -DignoreNonCompile=true -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>org.eclipse.jetty</groupId>
									<artifactId>jetty-runner</artifactId>
									<version>${jetty.runner.version}</version>
									<destFileName>jetty-runner.jar</destFileName>
								</artifactItem>
							</artifactItems>
						</configuration>
					</execution>
					<!--
                    <execution>
                      <id>unpack-zip</id>
                      <phase>package</phase>
                      <goals>
                        <goal>unpack-dependencies</goal>
                      </goals>
                      <configuration>
                        <artifactItems>
                          <artifactItem>
                            <groupId>com.newrelic.agent.java</groupId>
                            <artifactId>newrelic-java</artifactId>
                            <version>${newrelic.version}</version>
                            <type>zip</type>
                            <overWrite>true</overWrite>
                            <outputDirectory>target</outputDirectory>
                            <destFileName>newrelic</destFileName>
                          </artifactItem>
                        </artifactItems>
                        <outputDirectory>target/newrelic</outputDirectory>
                      </configuration>
                    </execution>
                    -->
				</executions>
			</plugin>

			<!-- Allow this web application to be started with the command : 'mvn
                tomcat7:run' -->
			<plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
				<version>${maven.tomcat7.plugin.version}</version>
				<dependencies>
					<dependency>
						<groupId>${project.groupId}</groupId>
						<artifactId>${project.artifactId}</artifactId>
						<version>${project.version}</version>
						<type>war</type>
					</dependency>
					<!--
                    <dependency>
                        <groupId>${jdbc.groupId}</groupId>
                        <artifactId>${jdbc.client.artifactId}</artifactId>
                        <version>${jdbc.version}</version>
                        <scope>runtime</scope>
                    </dependency>
                    -->
				</dependencies>
				<configuration>
					<!-- http port -->
					<port>${tomcat.port}</port>
					<path>/visma</path>
					<!--<contextFile>${basedir}/src/main/webapp/META-INF/context.xml</contextFile> -->
					<addWarDependenciesInClassloader>true</addWarDependenciesInClassloader>
					<!--
            <systemProperties>
                <java.security.auth.login.config>${basedir}/conf/jaas.config</java.security.auth.login.config>
            </systemProperties>
            -->
					<url>${deploy.url}</url>
					<username>${cargo.remote.user}</username>
					<password>${cargo.remote.password}</password>
					<addContextWarDependencies>true</addContextWarDependencies>
					<addWarDependenciesInClassloader>true</addWarDependenciesInClassloader>
					<!--<configurationDir>${basedir}</configurationDir>-->
					<server>nabla-tomcat</server>
				</configuration>
			</plugin>
			<plugin>
				<groupId>com.atlassian.maven.plugins</groupId>
				<artifactId>maven-clover2-plugin</artifactId>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>
			<plugin>
				<groupId>com.github.marschall</groupId>
				<artifactId>jdeps-maven-plugin</artifactId>
				<version>${maven.marschall.jdeps.plugin.version}</version>
				<!-- optionally any configuration -->
				<executions>
					<execution>
						<id>jdeps</id>
						<phase>package</phase>
						<goals>
							<goal>jdeps</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<profile>true</profile>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>exec</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<executable>maven</executable>
					<mainClass>com.nabla.project.visma.App</mainClass>
					<!-- optional
				  <workingDirectory>/tmp</workingDirectory>
				  <arguments>
					<argument>-X</argument>
					<argument>myproject:dist</argument>
				  </arguments>
				   -->
				</configuration>
			</plugin>

			<plugin>
				<groupId>com.sebastian-daschner</groupId>
				<artifactId>jaxrs-analyzer-maven-plugin</artifactId>
				<version>${maven.jaxrs.analyzer.plugin.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>analyze-jaxrs</goal>
						</goals>
						<configuration>
							<!--<backend>plaintext</backend>-->
							<backend>swagger</backend>
							<deployedDomain>localhost</deployedDomain>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!--
			<plugin>
				<groupId>com.garethevans.plugin</groupId>
				<artifactId>swagger-codegen-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<inputSpec>src/main/resources/api.yaml</inputSpec>
							<language>java</language>
						</configuration>
					</execution>
				</executions>
			</plugin>
			-->
			<plugin>
				<groupId>com.github.kongchen</groupId>
				<artifactId>swagger-maven-plugin</artifactId>
				<version>${maven.swagger.plugin.version}</version>
				<executions>
					<execution>
						<phase>compile</phase>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<apiSources>
						<apiSource>
							<springmvc>false</springmvc>
							<!--<locations>com.github.kongchen.swagger.sample.wordnik.resource</locations>-->
							<locations>com.nabla.project.visma</locations>
							<schemes>http,https</schemes>
							<host>localhost:9090</host>
							<basePath>/visma</basePath>
							<!--
                            <host>petstore.swagger.wordnik.com</host>
                            <basePath>/api</basePath>
                            -->
							<info>
								<title>Swagger Maven Plugin Sample</title>
								<version>v1</version>
								<description>This is a sample</description>
								<termsOfService>http://www.github.com/kongchen/swagger-maven-plugin</termsOfService>
								<contact>
									<email>kongchen@gmail.com</email>
									<name>Kong Chen</name>
									<url>http://kongch.com</url>
								</contact>
								<license>
									<url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
									<name>Apache 2.0</name>
								</license>
							</info>
							<!-- Support classpath or file absolute path here.
                            1) classpath e.g: "classpath:/markdown.hbs", "classpath:/templates/hello.html"
                            2) file e.g: "${basedir}/src/main/resources/markdown.hbs",
                                "${basedir}/src/main/resources/template/hello.html" -->
							<templatePath>${basedir}/templates/strapdown.html.hbs</templatePath>
							<outputPath>${basedir}/build/swagger/document.html</outputPath>
							<swaggerDirectory>${basedir}/build/swagger/swagger-ui</swaggerDirectory>
						</apiSource>
					</apiSources>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>${maven.javadoc.plugin.version}</version>
				<executions>
					<execution>
						<id>generate-swagger-docs</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>javadoc</goal>
						</goals>
						<configuration>
							<!--
                            <doclet>com.hypnoticocelot.jaxrs.doclet.ServiceDoclet</doclet>
                            <docletArtifact>
                                <groupId>com.hypnoticocelot</groupId>
                                <artifactId>jaxrs-doclet</artifactId>
                                <version>${jaxrs.doclet.version}</version>
                            </docletArtifact>
                            -->
							<doclet>com.carma.swagger.doclet.ServiceDoclet</doclet>
							<docletArtifact>
								<groupId>com.carma</groupId>
								<artifactId>swagger-doclet</artifactId>
								<version>${swagger.doclet.version}</version>
							</docletArtifact>
							<reportOutputDirectory>${project.build.outputDirectory}</reportOutputDirectory>
							<useStandardDocletOptions>false</useStandardDocletOptions>
							<additionalparam>-apiVersion 1 -docBasePath /apidocs -apiBasePath / -verbose</additionalparam>
						</configuration>
					</execution>
					<!-- Extended Wadl Config: javadoc plugin generates resourcedoc.xml during the compilation using doclet.
                     Generated file is then used during runtime to attach javadoc information to wadl. -->
					<execution>
						<id>generate-jersey-docs</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>javadoc</goal>
						</goals>
						<configuration>
							<subpackages>com.nabla.project.services</subpackages>
							<doclet>org.glassfish.jersey.wadl.doclet.ResourceDoclet</doclet>
							<docletPath>${path.separator}${project.build.outputDirectory}</docletPath>
							<docletArtifacts>
								<!-- jersey doclet generator -->
								<docletArtifact>
									<groupId>org.glassfish.jersey.ext</groupId>
									<artifactId>jersey-wadl-doclet</artifactId>
									<version>${jersey.version}</version>
								</docletArtifact>
								<!--
									 Also specify jersey and xerces as doclet artifacts as the ResourceDoclet
									 uses classes provided by them to generate the resourcedoc.
								  -->
								<docletArtifact>
									<groupId>org.glassfish.jersey.core</groupId>
									<artifactId>jersey-server</artifactId>
									<version>${jersey.version}</version>
								</docletArtifact>
								<docletArtifact>
									<groupId>xerces</groupId>
									<artifactId>xercesImpl</artifactId>
									<version>${xerces.version}</version>
								</docletArtifact>
							</docletArtifacts>
							<!-- the following option is required as a work around for
								  version 2.5 of the javadoc plugin which will be used
								  by a maven version > 2.0.9 -->
							<useStandardDocletOptions>false</useStandardDocletOptions>
							<additionalparam>-output ${project.build.outputDirectory}/resourcedoc.xml</additionalparam>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.apache.maven.doxia</groupId>
						<artifactId>doxia-core</artifactId>
						<version>${doxia.core.version}</version>
					</dependency>
					<dependency>
						<groupId>org.apache.maven.doxia</groupId>
						<artifactId>doxia-site-renderer</artifactId>
						<version>${doxia.version}</version>
					</dependency>
				</dependencies>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo.jspc</groupId>
				<artifactId>jspc-maven-plugin</artifactId>
			</plugin>

			<!--
			<plugin>
				<groupId>com.sun.jersey.contribs</groupId>
				<artifactId>maven-wadl-plugin</artifactId>
				<version>${jersey.version}</version>
			    <dependencies>
					<dependency>
				        <groupId>org.glassfish.jersey.media</groupId>
				        <artifactId>jersey-media-json-jackson</artifactId>
				        <version>${jersey.version}</version>
      			  	</dependency>
      			  	<dependency>
                       <groupId>org.glassfish.jersey.core</groupId>
                       <artifactId>jersey-server</artifactId>
                       <version>${jersey.version}</version>
					</dependency>
					<dependency>
						<groupId>xerces</groupId>
						<artifactId>xercesImpl</artifactId>
						<version>${xerces.version}</version>
					</dependency>
					<dependency>
					    <groupId>javax.inject</groupId>
					    <artifactId>javax.inject</artifactId>
					    <version>${inject.version}</version>
					</dependency>
			    </dependencies>
				<executions>
					<execution>
						<id>generate</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<phase>compile</phase>
					</execution>
				</executions>
				<configuration>
					<wadlFile>${project.build.outputDirectory}/application.wadl</wadlFile>
					<formatWadlFile>true</formatWadlFile>
					<baseUri>https://[host]:8444/visma/private</baseUri>
					<packagesResourceConfig>
						<param>com.nabla.project.hub.war.guice.services</param>
					</packagesResourceConfig>
					<wadlGenerators>
						<wadlGeneratorDescription>
							<className>com.sun.jersey.server.wadl.generators.WadlGeneratorApplicationDoc
							</className>
							<properties>
								<property>
									<name>applicationDocsFile</name>
									<value>${project.basedir}/src/main/resources/application-doc.xml</value>
								</property>
							</properties>
						</wadlGeneratorDescription>
						<wadlGeneratorDescription>
							<className>com.sun.jersey.server.wadl.generators.WadlGeneratorGrammarsSupport
							</className>
							<properties>
								<property>
									<name>grammarsFile</name>
									<value>${project.basedir}/src/main/resources/application-grammars.xml</value>
								</property>
							</properties>
						</wadlGeneratorDescription>
						<wadlGeneratorDescription>
							<className>com.sun.jersey.server.wadl.generators.resourcedoc.WadlGeneratorResourceDocSupport
							</className>
							<properties>
								<property>
									<name>resourceDocFile</name>
									<value>${project.build.outputDirectory}/resourcedoc.xml</value>
								</property>
							</properties>
						</wadlGeneratorDescription>
					</wadlGenerators>
				</configuration>
			</plugin>
			-->
			<plugin>
				<groupId>org.bitstrings.maven.plugins</groupId>
				<artifactId>dependencypath-maven-plugin</artifactId>
				<version>${maven.dependencypath.plugin.version}</version>
				<executions>
					<execution>
						<id>set-all</id>
						<goals>
							<goal>set</goal>
						</goals>
					</execution>
					<execution>
						<id>set-relative-builddir</id>
						<goals>
							<goal>set</goal>
						</goals>
						<configuration>
							<propertySets>
								<propertySet>
									<suffix>builddir</suffix>
									<relativeTo>${project.build.directory}</relativeTo>
									<transitive>false</transitive>
								</propertySet>
							</propertySets>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- TODO see https://github.com/bitstrings/nbm-maven/tree/master-codehaus
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>nbm-maven-plugin</artifactId>
				<version>${maven.nbm.plugin.version}</version>
				<extensions>true</extensions>
				<executions>
					<execution>
						<goals>
							<goal>webstart-app</goal>
						</goals>
						<configuration>
							<masterJnlpFile>src/main/webstart/${brandingToken}.jnlp</masterJnlpFile>
							<masterJnlpFileName>${brandingToken}</masterJnlpFileName>
							<generateJnlpApplicationTemplate>true</generateJnlpApplicationTemplate>
							<additionalArguments>-J-Xms384m -J-Xmx800m -J-XX:MaxPermSize=256m -J-Djava.util.Arrays.useLegacyMergeSort=true</additionalArguments>
							<keystore>${jarsigner.keystore}</keystore>
							<keystorealias>${jarsigner.alias}</keystorealias>
							<keystorepassword>${jarsigner.storepass}</keystorepassword>
							<keystoretype>${jarsigner.storetype}</keystoretype>
							<signingRemoveExistingSignatures>true</signingRemoveExistingSignatures>
							<signingThreads>8</signingThreads>
							<webappResources>
								<webappResource>
									<directory>src/main/resources</directory>
								</webappResource>
							</webappResources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			-->
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>jersey</id>
			<activation>
				<property>
					<name>!profile.activation</name>
					<!--
					<name>server</name>
					<value>jersey</value>
					-->
				</property>
			</activation>
			<dependencies>
				<dependency>
					<groupId>org.glassfish.jersey.core</groupId>
					<artifactId>jersey-server</artifactId>
				</dependency>
				<dependency>
					<groupId>org.glassfish.jersey.containers</groupId>
					<artifactId>jersey-container-servlet-core</artifactId>
				</dependency>
				<dependency>
					<groupId>org.glassfish.jersey.containers</groupId>
					<artifactId>jersey-container-jetty-http</artifactId>
				</dependency>
				<dependency>
					<groupId>org.glassfish.jersey.media</groupId>
					<artifactId>jersey-media-moxy</artifactId>
				</dependency>
				<!--  Jersey Client required for test *and runtime* due to Jersey bug : https://java.net/jira/browse/JERSEY-2104 -->
				<!--  This dependency can be scoped to test when Jersey is upgraded to >=2.4 -->
				<dependency>
					<groupId>org.glassfish.jersey.core</groupId>
					<artifactId>jersey-client</artifactId>
				</dependency>
			</dependencies>
		</profile>
		<profile>
			<id>jetty9x</id>
			<activation>
				<property>
					<!--<name>!profile.activation</name>-->
					<name>server</name>
					<value>jetty9x</value>
				</property>
			</activation>
			<dependencies>
				<dependency>
					<groupId>org.eclipse.jetty</groupId>
					<artifactId>jetty-proxy</artifactId>
					<version>${jetty9.version}</version>
					<scope>compile</scope>
				</dependency>
				<dependency>
					<groupId>org.eclipse.jetty</groupId>
					<artifactId>jetty-server</artifactId>
					<version>${jetty9.version}</version>
					<type>jar</type>
				</dependency>
				<dependency>
					<groupId>org.eclipse.jetty</groupId>
					<artifactId>jetty-servlet</artifactId>
					<version>${jetty9.version}</version>
					<type>jar</type>
				</dependency>
				<!--
				<dependency>
					<groupId>org.eclipse.jetty</groupId>
					<artifactId>jetty-annotations</artifactId>
					<version>${jetty9.version}</version>
					<scope>compile</scope>
				</dependency>
				-->
				<!--
				<dependency>
					<groupId>org.eclipse.jetty</groupId>
					<artifactId>jetty-deploy</artifactId>
					<version>${jetty.version}</version>
					<scope>runtime</scope>
				</dependency>
				-->
				<dependency>
					<groupId>org.eclipse.jetty</groupId>
					<artifactId>jetty-http</artifactId>
					<version>${jetty9.version}</version>
					<type>jar</type>
					<scope>runtime</scope>
				</dependency>
				<dependency>
					<groupId>org.eclipse.jetty</groupId>
					<artifactId>jetty-rewrite</artifactId>
					<version>${jetty9.version}</version>
					<type>jar</type>
					<scope>runtime</scope>
				</dependency>
				<dependency>
					<groupId>org.eclipse.jetty</groupId>
					<artifactId>jetty-servlets</artifactId>
					<version>${jetty9.version}</version>
					<type>jar</type>
					<scope>runtime</scope>
				</dependency>
			</dependencies>
		</profile>
		<profile>
			<id>jsf</id>
			<activation>
				<property>
					<name>!profile.activation</name>
				</property>
			</activation>
			<dependencies>
				<!-- for cannot access javax.faces.application.FacesMessage -->
				<!-- see in core project it is provided (needed for jboss 7) -->
				<!-- TODO remove old API
				<dependency>
					<groupId>javax.faces</groupId>
					<artifactId>jsf-api</artifactId>
					<scope>${scope.tomcat.never.type}</scope>
				</dependency>
				-->

				<!-- TODO remove not needed old impl
						<dependency>
								<groupId>javax.faces</groupId>
								<artifactId>jsf-impl</artifactId>
								<version>${jsf.impl.version}</version>
								<scope>${scope.type}</scope>
						</dependency>
				-->

				<!-- TODO remove
					<dependency>
						<groupId>org.primefaces</groupId>
						<artifactId>primefaces</artifactId>
						<version>4.0</version>
					</dependency>
				 -->

				<!-- Javaee API -->
				<!-- TODO remove
				<dependency>
						<groupId>javax</groupId>
						<artifactId>javaee-api</artifactId>
						<version>${javax.javaee.api.version}</version>
					<scope>${scope.type}</scope>
				</dependency>
				 recommended way is to include
				<dependency>
							<groupId>javax.faces</groupId>
							<artifactId>javax.faces-api</artifactId>
							<version>2.1</version>
						<scope>${scope.type}</scope>
				</dependency>
				-->
				<!-- Tomcat 6 need this -->
				<dependency>
					<groupId>com.sun.el</groupId>
					<artifactId>el-ri</artifactId>
				</dependency>
				<!-- http://download.java.net/maven/2 needed for tomcat only -->
				<!-- replaced by javax.faces for other except tomcat -->
				<dependency>
					<groupId>com.sun.faces</groupId>
					<artifactId>jsf-api</artifactId>
					<scope>${scope.tomcat.only.type}</scope>
				</dependency>
				<dependency>
					<groupId>com.sun.faces</groupId>
					<artifactId>jsf-impl</artifactId>
					<scope>${scope.tomcat.only.type}</scope>
				</dependency>
			</dependencies>
		</profile>
		<profile>
			<id>jmeter</id>
			<activation>
				<property>
					<name>profile.activation</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>com.lazerycode.jmeter</groupId>
						<artifactId>jmeter-maven-plugin</artifactId>
						<version>${maven.jmeter.plugin.version}</version>
						<executions>
							<execution>
								<id>jmeter-tests</id>
								<phase>integration-test</phase>
								<goals>
									<goal>jmeter</goal>
								</goals>
							</execution>
						</executions>
						<inherited>true</inherited>
					</plugin>
					<!--
                    <plugin>
                        <groupId>com.lazerycode.jmeter</groupId>
                        <artifactId>jmeter-analysis-maven-plugin</artifactId>
                        <version>${maven.jmeter.analysis.plugin.version}</version>
                        <inherited>true</inherited>
                        <executions>
                            <execution>
                                <id>create-html-report</id>
                                <phase>integration-test</phase>
                                <goals>
                                    <goal>analyze</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    -->
					<plugin>
						<groupId>de.codecentric</groupId>
						<artifactId>jmeter-graph-maven-plugin</artifactId>
						<version>${maven.jmeter.graph.plugin.version}</version>
						<executions>
							<execution>
								<id>create-graph-threads</id>
								<phase>integration-test</phase>
								<goals>
									<goal>create-graph</goal>
								</goals>
							</execution>
						</executions>
						<inherited>true</inherited>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>gatling</id>
			<activation>
				<property>
					<name>profile.activation</name>
				</property>
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>net.alchim31.maven</groupId>
						<artifactId>scala-maven-plugin</artifactId>
						<version>${maven.scala.plugin.version}</version>
						<executions>
							<execution>
								<goals>
									<goal>compile</goal>
									<goal>testCompile</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<args>
								<arg>-feature</arg>
								<arg>-deprecation</arg>
							</args>
							<jvmArgs>
								<jvmArg>-Xms64m</jvmArg>
								<jvmArg>-Xmx1024m</jvmArg>
							</jvmArgs>
						</configuration>
					</plugin>
					<!-- enable scalatest -->
					<!--
					<plugin>
						<groupId>org.scalatest</groupId>
						<artifactId>scalatest-maven-plugin</artifactId>
						<version>${maven.scalatest.plugin.version}</version>
						<configuration>
							<reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
							<junitxml>.</junitxml>
							<filereports>TestSuite.txt</filereports>
						</configuration>
						<executions>
							<execution>
								<id>test</id>
								<goals>
									<goal>test</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					-->
					<plugin>
						<!--<groupId>com.excilys.ebi.gatling</groupId>-->
						<groupId>io.gatling</groupId>
						<artifactId>gatling-maven-plugin</artifactId>
						<version>${maven.gatling.plugin.version}</version>
						<executions>
							<execution>
								<phase>integration-test</phase>
								<goals>
									<goal>execute</goal>
								</goals>
								<!--
                                <configuration>
                                    <includes>
                                        <include>**/RecordedSimulation.scala</include>
                                    </includes>
                                </configuration>
                                -->
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
			<dependencies>
				<dependency>
					<groupId>io.netty</groupId>
					<artifactId>netty</artifactId>
					<version>${netty.version}</version>
				</dependency>
				<!--
				<dependency>
					<groupId>com.typesafe</groupId>
					<artifactId>config</artifactId>
					<version>1.2.1</version>
				</dependency>
				-->
				<dependency>
					<groupId>io.gatling</groupId>
					<artifactId>gatling-charts</artifactId>
					<scope>test</scope>
				</dependency>
				<dependency>
					<!--<groupId>com.excilys.ebi.gatling.highcharts</groupId>-->
					<groupId>io.gatling.highcharts</groupId>
					<artifactId>gatling-charts-highcharts</artifactId>
					<scope>test</scope>
				</dependency>
				<dependency>
					<!--<groupId>com.excilys.ebi.gatling</groupId>-->
					<groupId>io.gatling</groupId>
					<artifactId>gatling-app</artifactId>
					<scope>test</scope>
				</dependency>
				<!--
                <dependency>
                    <groupId>com.excilys.ebi.gatling</groupId>
                    <artifactId>gatling-recorder</artifactId>
                    <scope>test</scope>
                </dependency>
                -->
				<dependency>
					<groupId>org.scala-lang</groupId>
					<artifactId>scala-library</artifactId>
					<scope>test</scope>
				</dependency>
				<dependency>
					<groupId>org.scala-lang</groupId>
					<artifactId>scala-reflect</artifactId>
					<scope>test</scope>
				</dependency>
				<!--
				<dependency>
					<groupId>org.json4s</groupId>
					<artifactId>json4s-jackson_${scala.short.version}</artifactId>
				</dependency>
				-->
			</dependencies>
		</profile>
		<!-- Jenkins by default defines a property BUILD_NUMBER which is used to enable the profile. -->
		<profile>
			<id>jenkins</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<!--
			<activation>
				<property>
					<name>BUILD_NUMBER</name>
				</property>
			</activation>
            <properties>
                <maven.test.failure.skip>false</maven.test.failure.skip>
                <maven.test.skip>false</maven.test.skip>
            </properties>
            -->
			<build>
				<plugins>
					<plugin>
						<groupId>org.owasp</groupId>
						<artifactId>dependency-check-maven</artifactId>
						<version>${maven.dependency.check.plugin.version}</version>
						<executions>
							<execution>

								<goals>
									<goal>check</goal>
									<!--<report>aggregate</report>-->
								</goals>
							</execution>
						</executions>
						<configuration>
							<!--<failBuildOnCVSS>8</failBuildOnCVSS>-->
							<format>XML</format>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.jboss.tattletale</groupId>
						<artifactId>tattletale-maven</artifactId>
						<version>${maven.tattletale.plugin.version}</version>
						<executions>
							<execution>
								<id>run-tattletale-report</id>
								<!-- it is bound by default to "package" phase, which isn't what we want for reporting -->
								<phase>verify</phase>
								<!-- needs to run after WAR package has been built -->
								<goals>
									<goal>report</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<source>${project.build.directory}/${project.build.finalName}/WEB-INF/lib</source>
							<destination>${project.reporting.outputDirectory}/tattletale-report</destination>
							<!--<reports>
								<report>jar</report>
								<report>multiplejars</report>
							</reports>-->
							<profiles>
								<profile>java6</profile>
							</profiles>
							<!--<failOnWarn>true</failOnWarn>-->
							<!-- excluding some jars, if jar name contains any of these strings it won't be analyzed -->
							<excludes>
								<exclude>persistence-api-</exclude>
								<exclude>xmldsig-</exclude>
							</excludes>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>codenarc-maven-plugin</artifactId>
						<version>${maven.codenarc.plugin.version}</version>
						<executions>
							<execution>
								<phase>prepare-package</phase>
								<goals>
									<goal>codenarc</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<sourceDirectory>${project.basedir}/src/main/groovy</sourceDirectory>
							<!--
							<maxPriority1Violations>0</maxPriority1Violations>
							<maxPriority2Violations>0</maxPriority2Violations>
							<maxPriority3Violations>0</maxPriority3Violations>
							-->
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>

#!/usr/bin/env python
import os
import re
import sys
from subprocess import check_output
# Collect the parameters
commit_msg_filepath = sys.argv[1]
if len(sys.argv) > 2:
    commit_type = sys.argv[2]
else:
    commit_type = ''
if len(sys.argv) > 3:
    commit_hash = sys.argv[3]
else:
    commit_hash = ''
print "prepare-commit-msg: File: %s\nType: %s\nHash: %s" % (commit_msg_filepath, commit_type, commit_hash)
# Figure out which branch we're on
branch = check_output(['git', 'symbolic-ref', '--short', 'HEAD']).strip()
print "prepare-commit-msg: On branch '%s'" % branch
regex = re.compile('^feature|^bugfix')
# Populate the commit message with the issue #, if there is one
if re.match(regex, branch):
    print "prepare-commit-msg: Oh hey, it's an issue branch."

    pattern = re.compile(r'[A-Z]{3,5}-[0-9]+')  # Matches any unique issue code
    issue = re.search(pattern, branch).group(0)  # Extract issue code

    #from jira import JIRA
    #options = {'server': 'https://nabla/jira'}
    #jira = JIRA(options, basic_auth=('test', 'TODO'))
    #issue_to_check = jira.issue(issue)
    # print issue_to_check.fields.project.key             # 'JRA'
    # print issue_to_check.fields.issuetype.name          # 'New Feature'
    # print issue_to_check.fields.reporter.displayName    # 'Mike Cannon-Brookes [Atlassian]'

    #required_message = "%s : %s by %s" % (issue_to_check,issue_to_check.fields.issuetype.name, issue_to_check.fields.reporter.displayName)
    required_message = issue

    with open(commit_msg_filepath, 'r+') as f:
        content = f.read()
        f.seek(0, 0)
        f.write("%s : %s" % (required_message, content))
